#%%

'''Predict properties for untested molecules and save to csv'''

# Load untested molecules
untested_molecules = pd.read_csv(UNTESTED_CSV)

# Calculate descriptors for untested molecules
untested_molecules['rdkit_mol'] = untested_molecules['SMILES'].apply(lambda x: rdkit.Chem.MolFromSmiles(x))

untested_molecules['ECFP4'] = untested_molecules['rdkit_mol'].apply(lambda x: list(AllChem.GetMorganFingerprintAsBitVect(x, 2, nBits=2048)))
untested_molecules['ECFP6'] = untested_molecules['rdkit_mol'].apply(lambda x: list(AllChem.GetMorganFingerprintAsBitVect(x, 3, nBits=2048)))
untested_molecules['MACCS'] = untested_molecules['rdkit_mol'].apply(lambda x: list(AllChem.GetMACCSKeysFingerprint(x)))

desc = [list(calc.CalcDescriptors(x)) for x in untested_molecules['rdkit_mol']]

for descriptor in desc_list:
    untested_molecules[descriptor] = [x[desc_list.index(descriptor)] for x in desc]

# Perform scaling
for desc in desc_list:
    if desc in untested_molecules.columns:
        untested_molecules[desc] = scaler.transform(untested_molecules[desc].values.reshape(-1, 1))

untested_molecules['physiochemical_descriptors'] = untested_molecules.apply(
    lambda row: [row[desc] for desc in phc_desc_list if desc in untested_molecules.columns], 
    axis=1
)
untested_molecules['counter_descriptors'] = untested_molecules.apply(
    lambda row: [row[desc] for desc in count_desc_list if desc in untested_molecules.columns], 
    axis=1
)
untested_molecules['all_descriptors'] = untested_molecules['physiochemical_descriptors'] + untested_molecules['counter_descriptors']

# Predict properties
for y_set in y_sets_list:
    untested_molecules[y_set] = np.nan  # Initialize columns with NaN
    for x_set in x_sets_list:
        x_vectors = np.array([np.array(x) for x in untested_molecules[x_set]])
        model_name = best_model[1]
        model = models[model_name]
        
        # Fit and predict, handle cases where no prediction can be made
        try:
            model.fit(np.array([np.array(x) for x in knime_filtered[x_set]]), knime_filtered[y_set].values)
            predictions = model.predict(x_vectors)
        except Exception as e:
            predictions = [np.nan] * len(x_vectors)  # If prediction fails, fill with NaN
            
        # Ensure predictions are either 1 or 0
        predictions = [1 if pred > 0.5 else 0 for pred in predictions]

        # Fill in predictions
        if len(predictions) == len(untested_molecules):
            untested_molecules[y_set] = predictions

# Save predictions to csv
untested_molecules[['SMILES', 'PKM2_inhibition', 'ERK2_inhibition']].to_csv('untested_molecules_with_predictions.csv', index=False)

# %%
